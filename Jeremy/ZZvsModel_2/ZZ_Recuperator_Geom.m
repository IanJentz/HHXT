function [G,argout] = IRP_Recuperator_1(model)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here

H = 0;


if H~=0 % 3D geometry
    
else % 2D geometry
    
  %points in geom (+x +y only)  
  pnts = 25.4e-3*[7.02490000000000,2.37600000000000;7.02490000000000,3.13490000000000;7.18910000000000,1.83880000000000;7.18910000000000,2.37600000000000;7.27490000000000,2.37600000000000;7.27490000000000,2.62600000000000;7.27490000000000,2.91690000000000;9.02800000000001,0;10.6615000000000,2.37600000000000;10.6615000000000,2.62600000000000;10.6615000000000,2.91690000000000;10.8669000000000,1.83890000000000;10.8669000000000,2.37590000000000;10.9115000000000,2.37600000000000;10.9115000000000,3.13490000000000;11.3669000000000,2.37600000000000];
  pnts = 25.4e-3*[7.02490000000000,2.37600000000000;7.02490000000000,3.28350000000000;7.18910000000000,1.83880000000000;7.18910000000000,2.37600000000000;7.27490000000000,2.37600000000000;7.27490000000000,2.62600000000000;7.27490000000000,3.03350000000000;9.02800000000001,0;10.6615000000000,2.37600000000000;10.6615000000000,2.62600000000000;10.6615000000000,3.03350000000000;10.8669000000000,1.83880000000000;10.8669000000000,2.37590000000000;10.9115000000000,2.37600000000000;10.9115000000000,3.28350000000000;11.3669000000000,2.37600000000000];
  x = pnts(:,1); y = pnts(:,2);
  
  mpts = 20; %max points
  
  %polygons
  P1 = [2,6,x(8),x(3),-x(3),-x(8),-x(3),x(3),y(8),y(3),y(3),y(8),-y(3),-y(3)]';
  P2 = [2,3,x(8),x(12),x(12),y(8),-y(12),y(12)]';
  P3 = [2,3,-x(8),-x(12),-x(12),y(8),-y(12),y(12)]';
  P4 = [2,3,x(8),x(12),x(3),y(8),y(12),y(3)]';
  P5 = [2,3,x(3),x(12),x(8),-y(3),-y(12),-y(8)]';
  P6 = [2,3,-x(8),-x(12),-x(3),-y(8),-y(12),-y(3)]';
  P7 = [2,3,-x(3),-x(12),-x(8),y(3),y(12),y(8)]';
  P8 = [2,8,x(3),x(12),x(13),x(9),x(10),x(6),x(5),x(4),...
      y(3),y(12),y(13),y(9),y(10),y(6),y(5),y(4)]';
  P9 = [2,8,x(4),x(5),x(6),x(10),x(9),x(13),x(12),x(3),...
      -y(4),-y(5),-y(6),-y(10),-y(9),-y(13),-y(12),-y(3)]';  
  P10 = [2,8,-x(3),-x(12),-x(13),-x(9),-x(10),-x(6),-x(5),-x(4),...
      -y(3),-y(12),-y(13),-y(9),-y(10),-y(6),-y(5),-y(4)]';
  P11 = [2,8,-x(4),-x(5),-x(6),-x(10),-x(9),-x(13),-x(12),-x(3),...
      y(4),y(5),y(6),y(10),y(9),y(13),y(12),y(3)]'; 
  P12 = [2,20,x(1),x(2),x(15),x(14),x(16),...
      x(16),x(14),x(15),x(2),x(1),...
      -x(1),-x(2),-x(15),-x(14),-x(16),...
      -x(16),-x(14),-x(15),-x(2),-x(1),...
      y(1),y(2),y(15),y(14),y(16),...
      -y(16),-y(14),-y(15),-y(2),-y(1),...
      -y(1),-y(2),-y(15),-y(14),-y(16),...
      y(16),y(14),y(15),y(2),y(1),...
      ]';
  
  % rectangles (to subtract)
  R1 = [3,4,x(6),x(10),x(11),x(7),y(6),y(10),y(11),y(7)]';
  R2 = [3,4,x(6),x(10),x(11),x(7),-y(6),-y(10),-y(11),-y(7)]';
  R3 = [3,4,-x(6),-x(10),-x(11),-x(7),-y(6),-y(10),-y(11),-y(7)]';
  R4 = [3,4,-x(6),-x(10),-x(11),-x(7),y(6),y(10),y(11),y(7)]';
  R5 = [2,4,x(12),x(12),-x(12),-x(12),y(12),-y(12),-y(12),y(12)]';
  
  
  P1 = padarray(P1,2*mpts-length(P1)+2,0,'post');
  P2 = padarray(P2,2*mpts-length(P2)+2,0,'post');
  P3 = padarray(P3,2*mpts-length(P3)+2,0,'post');
  P4 = padarray(P4,2*mpts-length(P4)+2,0,'post');
  P5 = padarray(P5,2*mpts-length(P5)+2,0,'post');
  P6 = padarray(P6,2*mpts-length(P6)+2,0,'post');
  P7 = padarray(P7,2*mpts-length(P7)+2,0,'post');
  P8 = padarray(P8,2*mpts-length(P8)+2,0,'post');
  P9 = padarray(P9,2*mpts-length(P9)+2,0,'post');
  P10 = padarray(P10,2*mpts-length(P10)+2,0,'post');
  P11 = padarray(P11,2*mpts-length(P11)+2,0,'post');
  P12 = padarray(P12,2*mpts-length(P12)+2,0,'post');
  
  R1 = padarray(R1,2*mpts-length(R1)+2,0,'post');
  R2 = padarray(R2,2*mpts-length(R2)+2,0,'post');
  R3 = padarray(R3,2*mpts-length(R3)+2,0,'post');
  R4 = padarray(R4,2*mpts-length(R4)+2,0,'post');
  R5 = padarray(R5,2*mpts-length(R5)+2,0,'post');
  
  % use decsg to build the geometry out intersecting rectangles and
  gd = [R1,R2,R3,R4,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12];
  ns = char('R1','R2','R3','R4','P1','P2','P3','P4','P5','P6','P7','P8','P9','P10','P11','P12')';
  sf = ['P12-R1-R2-R3-R4',...
       '+P1+P2+P3+P4+P5+P6+P7+P8+P9+P10+P11'];

    gd = [R1,R2,R3,R4,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12];
    ns = char('R1','R2','R3','R4','P1','P2','P3','P4','P5','P6','P7','P8','P9','P10','P11','P12')';
    sf = ['P12-R1-R2-R3-R4',...
       '+P1+P2+P3+(P4+P8)+(P5+P9)+(P6+P10)+(P7+P11)'];
   
   gd = [R1,R2,R3,R4,R5,P5,P4,P6,P7,P8,P9,P10,P11,P12];
  ns = char('R1','R2','R3','R4','R5','P4','P5','P6','P7','P8','P9','P10','P11','P12')';
  sf = ['(P12-R1-R2-R3-R4+R5)',...
       '+(P4+P8)+(P5+P9)+(P6+P10)+(P7+P11)'];
   
%       gd = [R1,R2,R3,R4,P12];
%   ns = char('R1','R2','R3','R4','P12')';
%   sf = ['P12-R1-R2-R3-R4'];
   
%    gd = [P12];
%    ns = char('P12')';
%    sf='P12';
   
  [dl,bt] = decsg(gd,sf,ns);
  
end

G = geometryFromEdges(model,dl);

argout = [];


end

